<?php
namespace NetBox\ProxyManager\ProxyList;

use NetBox\ProxyManager\Proxy\Proxy;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-17 at 23:06:37.
 */
class ProxyListTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ProxyList
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ProxyList;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     */
    public function testBaseManipulation()
    {
        $proxy = new Proxy('127.0.0.1:80');
        $this->object->add($proxy);
        $this->assertEquals(1, $this->object->getSize());
        $this->assertTrue($this->object->has($proxy));
        $this->assertEquals($proxy, $this->object->select());
        $this->object->remove($proxy);
        $this->assertEquals(0, $this->object->getSize());
        $this->assertEquals(0, $this->object->getIterator()->count());
    }


    public function testSelect()
    {
        $proxy = new Proxy('127.0.0.1:80');
        $this->object->add($proxy);
        $this->assertEquals($proxy, $this->object->select());
        $this->assertEquals(0, $this->object->getSize());
        $this->object->unSelect($proxy);
        $this->assertEquals(1, $this->object->getSize());
    }

    public function testIterator()
    {
        $this->object->add(new Proxy('127.0.0.1:80'));
        $this->object->add(new Proxy('127.0.0.2:80'));
        $this->object->add(new Proxy('127.0.0.3:80'));

        $this->assertInstanceOf('Traversable', $this->object->getIterator());
        $this->assertEquals(3, $this->object->getIterator()->count());
    }

    public function testAddDuplicateExceptionHasRightMessage()
    {
        $this->setExpectedException('InvalidArgumentException', 'This proxy already in list: "127.0.0.1:80@http"');

        $this->object->add(new Proxy('127.0.0.1:80'));
        $this->object->add(new Proxy('127.0.0.1:80'));
    }

    public function testAddTwiceExceptionHasRightMessage()
    {
        $this->setExpectedException('InvalidArgumentException', 'This proxy already in list: "127.0.0.1:80@http"');

        $proxy = new Proxy('127.0.0.1:80');
        $this->object->add($proxy);
        $this->object->add($proxy);
    }

    public function testSelectExceptionHasRightMessage()
    {
        $this->setExpectedException('UnderflowException', 'No proxies in list');

        $this->object->select();
    }

    public function testUnSelectExceptionHasRightMessage()
    {
        $this->setExpectedException('OutOfBoundsException', 'This proxy not in list: "127.0.0.1:80@http"');

        $proxy = new Proxy('127.0.0.1:80');
        $this->object->unSelect($proxy);
    }
}
