<?php
namespace NetBox\ProxyManager\ProxyList;

use NetBox\ProxyManager\Proxy\Proxy;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-18 at 16:08:03.
 */
class SortProxyListTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var SortProxyList
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $sorter = function (Proxy $a, Proxy $b) {
            $ctA = $a->getConnectTime();
            $ctB = $b->getConnectTime();

            $ttA = $a->getTotalTime();
            $ttB = $b->getTotalTime();

            $uA = $a->getUsedAt();
            $uB = $b->getUsedAt();

            $bA = $a->hasAttribute('banned');
            $bB = $b->hasAttribute('banned');

            if (is_null($uA) && is_null($uB))
                return 0;

            if (is_null($uA) || is_null($uB))
                return is_null($uA) ? 1 : -1;

            if (is_null($ctA) && is_null($ctB)) {
                if ($bA == $bB) {
                    if ($uA == $uB)
                        return 0;
                    return $uA > $uB ? 1 : -1;
                }

                return $bA ? 1 : -1;
            }

            if (is_null($ctA) || is_null($ctB))
                return is_null($ctA) ? 1 : -1;


            if ($bA == $bB) {
                if ($bA) {
                    if ($uA == $uB)
                        return 0;

                    return $uA < $uB ? -1 : 1;
                }

                if ($ttA == $ttB)
                    return 0;
                return $ttA < $ttB ? -1 : 1;
            }

            return $bA ? 1 : -1;
        };

        $this->object = new SortProxyList($sorter);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    protected function getProxyData()
    {
        return array(
            array(0, '127.0.0.1:10', 0, 1, '0000-00-00 00:00:00'),
            array(1, '127.0.0.1:11', 0, 2, '0000-00-00 00:00:00'),
            array(2, '127.0.0.1:12', 0, 0, '0000-00-00 00:00:01', array('banned' => true)),
            array(3, '127.0.0.1:13', 0, 0, '0000-00-00 00:00:02', array('banned' => true)),
            array(4, '127.0.0.1:14', 0, 0, '0000-00-00 00:00:03', array('banned' => true)),
            array(5, '127.0.0.1:15', null, null, '0000-00-00 00:00:01'),
            array(6, '127.0.0.1:16', null, null, '0000-00-00 00:00:02'),
            array(7, '127.0.0.1:17', null, null, '0000-00-00 00:00:01', array('banned' => true)),
            array(8, '127.0.0.1:18', null, null, '0000-00-00 00:00:02', array('banned' => true)),
            array(9, '127.0.0.1:19', null, null, null)
        );
    }

    public function testSort()
    {
        $proxies = array();
        foreach ($this->getProxyData() as $proxyData) {
            $time = $proxyData[4] ? new \DateTime($proxyData[4]) : null;
            $time = $time ? $time->getTimestamp() : null;

            $proxy = new Proxy($proxyData[1]);
            $proxy->setConnectTime($proxyData[2]);
            $proxy->setTotalTime($proxyData[3]);
            $proxy->setUsedAt($time);
            if (isset($proxyData[5])) {
                foreach ($proxyData[5] as $key => $value) {
                    $proxy->setAttribute($key, $value);
                }
            }

            $proxies[$proxyData[0]] = $proxy;
            $this->object->add($proxy);
        }

        $this->object->sortList();
        for ($i = 0; $i < 6; $i++) {
            $this->assertEquals(
                $proxies[$i],
                $this->object->select()
            );
        }
    }
}
